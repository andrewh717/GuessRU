{"version":3,"sources":["components/Panorama.js","components/StreetView.js","App.js","serviceWorker.js","index.js"],"names":["Panorama","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onScriptLoad","bind","assertThisInitialized","window","google","maps","StreetViewPanorama","document","getElementById","id","options","streetViewService","StreetViewService","latLng","LatLng","position","getPanoramaByLocation","streetViewPanoramaData","status","StreetViewStatus","OK","console","log","location","reload","_this2","s","createElement","type","src","x","getElementsByTagName","parentNode","insertBefore","addEventListener","e","react_default","a","Component","StreetView","coords","campusName","lat","long","campus","Math","random","generateLocation","lng","className","components_Panorama","pov","heading","pitch","addressControl","onClick","checkAnswer","playAgain","guess","name","correct","style","display","backgroundColor","innerText","incorrect","floor","App","components_StreetView","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAyDeA,kBAtDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFHA,8EAOJ,IAAIU,OAAOC,OAAOC,KAAKC,mBAClCC,SAASC,eAAeZ,KAAKJ,MAAMiB,IACnCb,KAAKJ,MAAMkB,SAFb,IAGMC,EAAoB,IAAIR,OAAOC,OAAOC,KAAKO,kBAE3CC,EAAS,IAAIV,OAAOC,OAAOC,KAAKS,OAAOlB,KAAKJ,MAAMkB,QAAQK,UAC9DJ,EAAkBK,sBAAsBH,EAFV,IAE2C,SAAUI,EAAwBC,GACnGA,IAAWf,OAAOC,OAAOC,KAAKc,iBAAiBC,GAE/CC,QAAQC,IAAI,mBAmCxBnB,OAAOoB,SAASC,SA/BJH,QAAQC,IAAI,oEAKJ,IAAAG,EAAA7B,KAClB,GAAKO,OAAOC,OAYVR,KAAKI,mBAZa,CAClB,IAAI0B,EAAInB,SAASoB,cAAc,UAC/BD,EAAEE,KAAO,kBACTF,EAAEG,IAAF,kFACA,IAAIC,EAAIvB,SAASwB,qBAAqB,UAAU,GAChDD,EAAEE,WAAWC,aAAaP,EAAGI,GAG7BJ,EAAEQ,iBAAiB,OAAQ,SAAAC,GACzBV,EAAKzB,mDAQT,OACEoC,EAAAC,EAAAV,cAAA,OAAKlB,GAAIb,KAAKJ,MAAMiB,YA7CH6B,aCEjBC,mLAEE,IAAMC,EAsEd,WAEI,IAAIC,EACAC,EACAC,EACJ,OAJAtB,QAAQC,IAAI,aAAesB,GAInBA,GACJ,KAAK,EACDF,EAAOG,KAAKC,UAAU,UAAU,WAAa,UAC7CH,EAAOE,KAAKC,UAAqB,UAAV,WAAsB,UAC7CL,EAAa,cACb,MACJ,KAAK,EACDC,EAAM,oBAAAG,KAAKC,SAAiC,UAC5CH,EAAO,oBAAAE,KAAKC,SAAiC,UAC7CL,EAAa,aACb,MACJ,KAAK,EACDC,EAAM,oBAAAG,KAAKC,SAAiC,UAC5CH,EAAO,oBAAAE,KAAKC,SAAiC,UAC7CL,EAAa,QACb,MACJ,KAAK,EACDC,EAAM,oBAAAG,KAAKC,SAAiC,UAC5CH,EAAO,mBAAAE,KAAKC,SAAiC,UAC7CL,EAAa,gBACb,MACJ,QACIpB,QAAQC,IAAI,yBAKpB,OAFAD,QAAQC,IAAI,aAAeoB,GAC3BrB,QAAQC,IAAI,cAAgBqB,GACrB,CAACD,EAAKC,EAAMF,GAtGAM,GACTxB,EAAW,CAACmB,IAAKF,EAAO,GAAIQ,IAAKR,EAAO,GAAIC,WAAYD,EAAO,IACrE,OACIJ,EAAAC,EAAAV,cAAA,OAAKsB,UAAU,aACXb,EAAAC,EAAAV,cAAA,qBACAS,EAAAC,EAAAV,cAAA,OAAKsB,UAAU,OACXb,EAAAC,EAAAV,cAAA,OAAKsB,UAAU,qBAEXb,EAAAC,EAAAV,cAACuB,EAAD,CACIzC,GAAG,aACHC,QAAS,CACLK,SAAUQ,EACV4B,IAAK,CACDC,QAAS,GACTC,MAAO,IAEXC,gBAAgB,OAKhClB,EAAAC,EAAAV,cAAA,OAAKsB,UAAU,OACXb,EAAAC,EAAAV,cAAA,OAAKsB,UAAU,gBACXb,EAAAC,EAAAV,cAAA,mCACAS,EAAAC,EAAAV,cAAA,OAAKsB,UAAU,8BACXb,EAAAC,EAAAV,cAAA,UAAQsB,UAAU,oBAAoBxC,GAAK,KAAK8C,QAAW,kBAAMC,EAAY,EAAGjC,EAASkB,cAAzF,eACAL,EAAAC,EAAAV,cAAA,UAAQsB,UAAU,oBAAoBxC,GAAK,OAAO8C,QAAW,kBAAMC,EAAY,EAAGjC,EAASkB,cAA3F,cACAL,EAAAC,EAAAV,cAAA,UAAQsB,UAAU,oBAAoBxC,GAAK,QAAQ8C,QAAW,kBAAMC,EAAY,EAAGjC,EAASkB,cAA5F,SACAL,EAAAC,EAAAV,cAAA,UAAQsB,UAAU,oBAAoBxC,GAAK,KAAK8C,QAAW,kBAAMC,EAAY,EAAGjC,EAASkB,cAAzF,kBAGJL,EAAAC,EAAAV,cAAA,OAAKlB,GAAG,WACJ2B,EAAAC,EAAAV,cAAA,OAAKlB,GAAG,gBACR2B,EAAAC,EAAAV,cAAA,UAAQsB,UAAU,wBAAwBxC,GAAI,gBAAgB8C,QAAWE,GAAzE,0BAnCHnB,aA2CzB,SAASkB,EAAYE,EAAOC,GACxB,GAAIf,IAAWc,EAAO,CAElB,IAAIE,EAAUrD,SAASC,eAAe,WACtCoD,EAAQC,MAAMC,QAAU,QACxBF,EAAQC,MAAME,gBAAkB,yBAChCxD,SAASC,eAAe,eAAewD,UAAY,eAChD,CAEH,IAAIC,EAAY1D,SAASC,eAAe,WACxCyD,EAAUJ,MAAMC,QAAU,QAC1BvD,SAASC,eAAe,eAAewD,UAAY,wCAA0CL,EAAO,IACpGM,EAAUJ,MAAME,gBAAkB,0BAM1C,SAASN,IAELtD,OAAOoB,SAASC,SAQpB,IAAMoB,EAJKC,KAAKqB,MAAsB,EAAhBrB,KAAKC,SAAe,GAwC3BP,QChGA4B,mLARX,OACE/B,EAAAC,EAAAV,cAAA,OAAKsB,UAAU,OACbb,EAAAC,EAAAV,cAACyC,EAAD,cAJU9B,aCKE+B,QACW,cAA7BlE,OAAOoB,SAAS+C,UAEe,UAA7BnE,OAAOoB,SAAS+C,UAEhBnE,OAAOoB,SAAS+C,SAASC,MACvB,2DCVNC,IAASC,OAAOrC,EAAAC,EAAAV,cAAC+C,EAAD,MAASnE,SAASC,eAAe,SDmH3C,kBAAmBmE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8e33a12.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Panorama extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onScriptLoad = this.onScriptLoad.bind(this)\r\n  }\r\n\r\n  onScriptLoad() {\r\n    // eslint-disable-next-line\r\n    const pano = new window.google.maps.StreetViewPanorama(\r\n      document.getElementById(this.props.id),\r\n      this.props.options);\r\n      var streetViewService = new window.google.maps.StreetViewService();\r\n      var STREETVIEW_MAX_DISTANCE = 100;\r\n      var latLng = new window.google.maps.LatLng(this.props.options.position);\r\n      streetViewService.getPanoramaByLocation(latLng, STREETVIEW_MAX_DISTANCE, function (streetViewPanoramaData, status) {\r\n          if (status === window.google.maps.StreetViewStatus.OK) {\r\n              // ok              \r\n              console.log(\"Image detected\");\r\n          } else {\r\n              // no street view available in this range, or some error occurred\r\n              playAgain();\r\n              console.log(\"No image detected\");\r\n          }\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.google) {\r\n      var s = document.createElement('script');\r\n      s.type = 'text/javascript';\r\n      s.src = `https://maps.google.com/maps/api/js?key=AIzaSyDgZXNZnlgCvEJ2-td1cLhaHptPowenPYg`;\r\n      var x = document.getElementsByTagName('script')[0];\r\n      x.parentNode.insertBefore(s, x);\r\n      // Below is important. \r\n      //We cannot access google.maps until it's finished loading\r\n      s.addEventListener('load', e => {\r\n        this.onScriptLoad()\r\n      })\r\n    } else {\r\n      this.onScriptLoad()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id={this.props.id} />\r\n    );\r\n  }\r\n}\r\n\r\nfunction playAgain() {\r\n  // Refreshes the page\r\n  window.location.reload();\r\n}\r\n\r\nexport default Panorama","import React, { Component } from 'react';\r\nimport Panorama from './Panorama'\r\n\r\n\r\nclass StreetView extends Component {\r\n    render() {\r\n        const coords = generateLocation();\r\n        const location = {lat: coords[0], lng: coords[1], campusName: coords[2]};\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>WhereRU</h1>\r\n                <div className=\"row\">\r\n                    <div className=\"streetView col-12\">\r\n                        {/* StreetView section goes here */}\r\n                        <Panorama \r\n                            id=\"myPanorama\"\r\n                            options={{\r\n                                position: location,\r\n                                pov: {\r\n                                    heading: 34,\r\n                                    pitch: 10\r\n                                },\r\n                                addressControl: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"guess col-12\">\r\n                        <h2>Which campus is this?</h2>\r\n                        <div className=\"row justify-content-center\">\r\n                            <button className=\"answer btn btn-lg\" id = \"CA\" onClick = {() => checkAnswer(1, location.campusName)}>College Ave</button>\r\n                            <button className=\"answer btn btn-lg\" id = \"Livi\" onClick = {() => checkAnswer(2, location.campusName)}>Livingston</button>\r\n                            <button className=\"answer btn btn-lg\" id = \"Busch\" onClick = {() => checkAnswer(3, location.campusName)}>Busch</button>\r\n                            <button className=\"answer btn btn-lg\" id = \"CD\" onClick = {() => checkAnswer(4, location.campusName)}>Cook/Douglass</button>                 \r\n                        </div>\r\n                        \r\n                        <div id=\"overlay\">\r\n                            <div id=\"overlayText\"></div>\r\n                            <button className=\"btn btn-lg play-again\" id =\"overlayButton\" onClick = {playAgain}>Play Again?</button>\r\n                        </div>\r\n                    </div>       \r\n                </div>\r\n            </div>        \r\n        );\r\n    }\r\n}\r\nfunction checkAnswer(guess, name) {\r\n    if (campus === guess) {\r\n        // Call function to display \"Correct!\"\r\n        var correct = document.getElementById(\"overlay\");\r\n        correct.style.display = \"block\";\r\n        correct.style.backgroundColor = \"rgba(72, 241, 50, 0.7)\";\r\n        document.getElementById(\"overlayText\").innerText = \"Correct!\";\r\n    } else {\r\n        // Display correct answer\r\n        var incorrect = document.getElementById(\"overlay\");\r\n        incorrect.style.display = \"block\";\r\n        document.getElementById(\"overlayText\").innerText = \"Sorry, that's incorrect.\\nYou are on \" + name + \".\";\r\n        incorrect.style.backgroundColor = \"rgba(230, 42, 18, 0.7)\";\r\n\r\n    }\r\n    // Call playAgain function\r\n}\r\n\r\nfunction playAgain() {\r\n    // Refreshes the page\r\n    window.location.reload();\r\n}\r\n\r\nfunction generateCampus() {\r\n    return Math.floor(Math.random() * 4 + 1);\r\n}\r\n\r\n// Global campus ID\r\nconst campus = generateCampus();\r\nfunction generateLocation() {\r\n    console.log(\"CampusID: \" + campus);\r\n    var campusName;\r\n    let lat;\r\n    let long;\r\n    switch (campus) {\r\n        case 1: // College Ave\r\n            lat =  Math.random()*(40.505717-40.498368) + 40.498368;\r\n            long = Math.random()*(-74.445459+74.447196) -74.447196;\r\n            campusName = \"College Ave\";\r\n            break;\r\n        case 2: // Livingston\r\n            lat = Math.random()*(40.525217-40.518432) + 40.518432;\r\n            long = Math.random()*(-74.432783+74.447196) -74.447196;\r\n            campusName = \"Livingston\";\r\n            break;\r\n        case 3: // Busch\r\n            lat = Math.random()*(40.528708-40.518432) + 40.518432;\r\n            long = Math.random()*(-74.453373+74.467771) -74.467771;\r\n            campusName = \"Busch\";\r\n            break;\r\n        case 4: // Cook/Douglass\r\n            lat = Math.random()*(40.485598-40.475704) + 40.475704;\r\n            long = Math.random()*(-74.427856+74.437336) -74.437336;\r\n            campusName = \"Cook/Douglass\";\r\n            break;\r\n        default:\r\n            console.log(\"Error: invalid campus\");\r\n            break;\r\n    }\r\n    console.log(\"Latitude: \" + lat);\r\n    console.log(\"Longitude: \" + long);\r\n    return [lat, long, campusName];\r\n}\r\n\r\nexport default StreetView;\r\n\r\n/* For rendering a Map\r\n    <Map\r\n        id=\"myMap\"\r\n        options={{\r\n            center: location,\r\n            zoom: 14\r\n        }}\r\n        onMapLoad={map => {\r\n        // eslint-disable-next-line\r\n        var marker = new window.google.maps.Marker({\r\n            position: location,\r\n            map: map,\r\n            title: 'You are here!'\r\n        });\r\n        }}\r\n    />\r\n*/","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './style.css';\r\nimport StreetView from './components/StreetView';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">     \r\n        <StreetView/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}